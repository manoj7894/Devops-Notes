apiVersion: apps/v1
kind: Deployment
metadata:
  name: javawebappdeployment
spec:
  replicas: 2
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: javawebapp
  template:
    metadata:
      name: javawebapppod
      labels:
        app: javawebapp
    spec:
      containers:
      - name: my-container
        image: ashokit/javawebapp
        env:
          - name: MYSQL_HOST
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: mysql-host
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: mysql-database
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-username
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-password
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "100m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "256Mi"
        volumeMounts:
            - name: my-pvc-volume
              mountPath: /path/in/container
      volumes:
        - name: my-pvc-volume
          persistentVolumeClaim:
            claimName: my-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  selector:
    app: javawebapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: NodePort
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: myapp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: javawebappdeployment
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-nginx-network-policy
  namespace: other
spec:
  podSelector:
    matchLabels:
      app: javawebapp
  policyTypes:
    - Ingress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            team: operation
      - podSelector:
          matchLabels:
            role: my-tomcat
  egress:
  - to:
    - podSelector:
        matchLabels:
          role: my-nginx  # From above my-nginx pod only you can expose or send request my-tomcat pod data
    ports:
    - protocol: TCP
      port: 80
