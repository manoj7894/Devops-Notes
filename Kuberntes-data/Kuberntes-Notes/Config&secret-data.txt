# What is kubernetes Config and Secret
What is config
-> Config is used to store the config data conusmed by pods and other resourece in cluster

What is Secret
-> Secret is used to store the senities data like username and password

Running notes
-> When we use kubernets config data is not encrypeted so that hacker will may hacker our data
-> when we deploy the config.yml file it will save in ECTD in cluster without encrypution
-> IF we use kubernets secret data is encrypted and when we do deployment data will save in ECTD as encryption

What are the difference between configmap and secret
Configmap will save the non-senitives data
Secret will save the senitives data

What are the types of secrets
 1) Opaque -> the most common type of secret. It allows you store the keyvalue pairs
 2) Docker-Registry -> used fot storing credientionls to authenciate with private Docker Registry
 3) TLS -> It is used to store the TLS certification
 4) Service Account -> Automatically created the secrets that provide the credientials for accessing kubernetes API

# How to encrypt and decrypt the data
-> echo -n 'what name do you want to encryption' | base64    --> Encrypt    [echo -n 'root' | base64]
-> echo MTAwMA== | base64 --decode  --> To decode the data or decrypt

# How to create config and secret files and attach to the deployment file
-> First you will create config.yml and deploy that file

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
data:
  mysql-host: mysql
  mysql-database: mydatabase

   	kubectl apply -f <configmapfile>  -> To apply the configmap file
	kubectl get cm  --> To see the configuremap data
	kubectl delete cm <configmapfile>
	kubectl describe cm <configmapfile>

-> Second you will create secret.yml and deploy that file

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cm9vdA==
  mysql-username: bWFub2o=
  mysql-password: cmFqYQ==

	kubectl apply -f <secretfile>  -> To apply the secret file
	kubectl get secret
	kubectl delete secret <secret name>
	kubectl describe secret <secret name>	

-> After deploy the above two files and you will deploy the deploement.yml 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: mysql-configmap
                  key: mysql-host
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: mysql-configmap
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: javawebapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: NodePort

	kubectl apply -f <deployment>  -> To apply the deployment file
-> After complete deployment you will enter into the pod and check wheather database is created or not
	kubectl exec -it <podname> -- /bin/bash  -> To enter into that pod
	mysql -h <hostname> -u <username> -p


How to create the config [This is extra][Running Notes]
-> First you will create one configmap file
-> We can configure the configmap file in deployment in two way 
   one is Env 
   another one is volumemount
 if we use Env suppose after days if some data will change in database it wont apply in your cluster
 if we use volumemount whenever data will change in database after you apply then automatically that data will be mount in cluster
-> kubectl apply -f <configmapfile>  -> To apply the configmap file
-> kubectl get cm  --> To see the configuremap data
-> kubectl delete cm <configfilename>  --> To delete the configuremap data
-> kubectl describe cm my-configmap  --> To describe the configmap file
-> After execute the above all steps we will add env in any deployment file
-> kubectl exec -it <podname> -- /bin/bash  -> To enter into that pod
-> After enter into the pod
   env | grep <enter env name>
   env | grep MYSQL_ROOT_PASSWORD
-> After complete depolyment in env you will deploy usign volume mount because env is not change automatically when we change in database
   -> we will change the value in configmap.yml after the change value and you go to pod and check the env value not change 
->  so that we will do deploy using volume mountin file. after deploy the file
-> kubectl exec -it <podname> /bin/bash  -> To enter into that pod
 you will enter into the pod and check the volume. after do volume mount then you will change value in config.yml after do deployment that value it will 
 automatically change in volumes