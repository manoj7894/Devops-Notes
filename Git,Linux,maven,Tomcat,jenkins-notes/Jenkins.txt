# What is jenkins
jenkins is a open source automation tool for CI/CD process
CI = Continuous Integration
CD = Continuos Deployment
jenkins is developed using java
jenkins is a slef containered open source automation server which can be used to automate the all tasks
related to building,testing,deploying and delivering the software

# How to install jenkins
-> Install java
sudo yum update
sudo wget https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-13.0.1_linux-x64_bin.tar.gz
sudo tar -xvf openjdk-13.0.1_linux-x64_bin.tar.gz
mv jdk-13.0.1 /opt/
cd ~
cd /etc/profile.d/
ll
sudo vim java.sh
	JAVA_HOME='/opt/jdk-13.0.1'
	PATH="$JAVA_HOME/bin:$PATH"
	export PATH
sh java.sh
cd ~
source /etc/profile
java --version

-> Install Git
sudo yum install git -y
git --version

-> Install jenkins
cd /opt/
sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade
sudo amazon-linux-extras install java-openjdk11 -y
sudo dnf install java-11-amazon-corretto -y               
sudo yum install jenkins -y                            
sudo systemctl enable jenkins                   
sudo systemctl start jenkins                        
sudo systemctl status jenkins                
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
     
-> After complete the jenkins instalition You will copy your Public Ip and paste that ip in your web browser along with port number[jenkins default port number is 8080]
-> Then It will ask the password you will paste initialAdminPassword there and install all plugins
-> later on you fill username and password and start the jenkins
-> After Start the jenkins You will go to manage jenkins and go to Plugins and install Eclipse Temurin installerVersion and jdk related plugins
-> After Install the Java plugins again you go to manage jenkins and go to tools and install java JDK8 and JDK11 and maven.         
-> later on you create one job
-> In Build Triggers we have two main options 
  -> Build perdically [It will build the job whichever time you want]
  -> POLL SCM [It will build the job whenever developer change code in github]
       * minute[0-59] 
       * hour[1-23]             
       * day of month [1-31]
       * month of the year [1-12]
       * day of the week [0-6]
-> cd /var/lib/jenkins/workspace [To see whatever jobs you have created in jenkins]
-> sudo vi /etc/sysconfig/jenkins [To see and change the port number in jenkins]
-> Do restart the jenkins after change the port number [sudo systemctl restart jenkins]
-> vi /var/lib/jenkins/config.xml [if you forget the jenkins password you will go that file write false on true place]
-> Do restart the jenkins after change the Password [sudo systemctl restart jenkins]
-> Do you want to configure Apache-tomact server in jenkins. You have follow the below steps
   -> You have to install Below tomact commands in jenkins terminal
   -> cd /opt
   -> sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.82/bin/apache-tomcat-9.0.82.tar.gz
   -> sudo tar -xvf apache-tomcat-9.0.82.tar.gz
   -> cd apache-tomcat-9.0.80
   -> sudo vi webapps/manager/META_INFA/contex.xml      
	allow ".*"                          
   -> cd /conf
   -> sudo vi server.xml  --> To change the port number                                            
   -> sudo vi tomcat-user.xml
-->
  <role rolename="manager-gui"/>
  <role rolename="admin-gui"/>
  <role rolename="manager-script"/>
  <user username="tomcat" password="tomact" roles="manager-gui"/>
  <user username="admin" password="admin" roles="manager-gui,admin-gui,manager-script"/>
</tomcat-users>

   -> cd /bin
   -> sudo sh startup.sh
-> After complete instilation you will login your tomcat using your public Ip and port Number
-> If you want to deploy the file by using jenkins you have install Deploy conatainer plugin in jenkins

# How to create the freestyle job
-> Create freestyle job
-> Click git and give URL and credentials in source code management
-> Go to build and click Invoke top-level maven target in build
-> It appears Maven Version and give maven goals [clean,package]
-> Go to Post-build Actions and click Deploy war/ear to a container
-> It appears WAR/EAR files and Context path [**/*.war, Ashokit-web]
-> Click Add container and click tomact server
-> It appears credentials and Tomcat URL  [admin/*****, http://3.111.58.23:9090/]
-> Click Apply and save
-> click Build Now

# How to deploy the files into differnet environment
-> Create Dev,Sit and Uat instances in Ec2 
-> You will download java and tomcat in 3 instances and access the tomact by using 3 instances public IP
-> After Complete the all instalition process
-> You will install build pipeline plugin in jenkins
-> You will create the one freestyle job
-> Click git and give URL and credentials in source code management
-> Click Delete workspace before build starts in Build Environment
-> Go to build and click Invoke top-level maven target
-> It appears Maven Version and give maven goals [clean,package]
-> Go to Post-build Actions and click Deploy war/ear to a container
-> It appears WAR/EAR files and Context path [**/*.war, Ashokit-web]
-> Click Add container and click tomact server
-> It appears credentials and Tomcat URL  [admin/*****, http://3.111.58.23:9090/]
-> Click Apply and save
-> click Build Now

-> Create second job
-> Click git and give URL and credentials in source code management
-> Click Build after other projects are build in Build trigger
    -> Give past dev job name
-> Go to build and click Invoke top-level maven target
-> It appears Maven Version and give maven goals [clean,package]
-> Go to Post-build Actions and click Deploy war/ear to a container
-> It appears WAR/EAR files and Context path [**/*.war, Ashokit-web]
-> Click Add container and click tomact server
-> It appears credentials and Tomcat URL  [admin/*****, http://3.111.58.23:9090/]
-> Click Apply and save
-> click Build Now

-> Create third job
-> Click git and give URL and credentials in source code management
-> Click Build after other projects are build in Build trigger
    -> Give past SIT job name
-> Go to build and click Invoke top-level maven target
-> It appears Maven Version and give maven goals [clean,package]
-> Go to Post-build Actions and click Deploy war/ear to a container
-> It appears WAR/EAR files and Context path [**/*.war, Ashokit-web]
-> Click Add container and click tomact server
-> It appears credentials and Tomcat URL  [admin/*****, http://3.111.58.23:9090/]
-> Click Apply and save
-> click Build Now

-> After create the three and go to the dashboard and click + symbol beside All
-> Give some name and click Build Pipeline View
-> select the layout do you want build the job upstream to downstream or downstream to upstream
-> Select job which do you want build first
-> leave the restart of the options and click apply and save


# If you want to get the data different branches from git hub
-> You have to select This project parametrized in General
-> Select choice parameter and give some name in Name
-> Give the Branches name in Choices
   master
   develop
   feature
   release
-> Give some description
-> Give name like is this */${BranchName} in branch specifier in source code managenmet
-> when you do the above branch configuration in git while we are building the project.
-> After create the job then Build with Parameters will appears. when you will click the Build with Parameters
-> It will show the branches from which do you want to build the job


# How to give Particular permissions to users
-> cd /var/lib/jenkins/users/  
-> vi user.xml [To see the jenkins users in jenkins terminal].
-> If you want to see the users in jenkins, go to manage jenkins and go to manage user
-> Give password, username, and email and create user
-> After create the user
-> You go manage jenkins and click Configure Global security
-> There are two options 
   Authentication means - who can access our application
   Authorization  means - what the users can do in our application
-> Right now you select jenkins own user database in Security Realm because if you are in company then you will provide LDAP [LDAP meas all company user would be in LDAP server] 
-> slecect the matrix based Authorization or project based matrix Authorization strategy in Authorization
-> Give permission which users do you want to give and click apply and save


# How to create master and slave configurion [To overcome loads of jobs on master]
 what is master
 where we create the jobs
 Dispatch the build jobs to the slaves for execution

 what is slave
 where we execute the jobs
 It hears the request from jenkins master
 slave will build the jobs dispatched by master

How to create master and slave configurion
-> you need to install git, java and jenkins softwares in master to follow steps
-> you need to install git and java in slave to follow steps
-> After creating instances and install software in that instances
-> You will create one directory in slave with somaname
-> After create the directory in slave you go to jenkins and click manage jenkins
-> Click magage nodes and clouds
-> Click New Node and give the somename and click permanent node and create
-> Number of executors means no of jobs do you want to run
-> Root directory means you have give that directoy path here  [/home/ec2-user/slave-1]
-> Give label name anything
-> Click Launch agent via SSH in Launch method
-> Give Public DNS of slave in Host place  [To get you have ec2 and click slave instance go to below it will appears]
-> Click credentionls and click SSH username with private key in Kind
-> Give username like ec2-user
-> Click Enter directly and paste your keypair there and click add
-> Select "manually Trusted Key verification Strategy" in host key strategy
-> You will leave the rest of the options and click apply and save
-> After complete the all above steps and you will create one in slave node
-> You create one freestyle job
-> Click Restrict where this porject can run in General
-> Click git and give URL and credentials in source code management
-> Go to build and click Invoke top-level maven target
-> It appears Maven Version and give maven goals [clean,package]
-> Go to Post-build Actions and click Deploy war/ear to a container
-> It appears WAR/EAR files and Context path [**/*.war, Ashokit-web]
-> Click Add container and click tomact server
-> It appears credentials and Tomcat URL  [admin/*****, http://3.111.58.23:9090/]
-> Click Apply and save
-> click Build Now
-> [when node seeing offline then you have to click node and click bring back online later on you will execute]


# What is jenkins pipeline
-> jenkins pipeline is a automation solution that lets you create simple or complex pipeline
-> jenkins pipeline is a combination of plugins which automates number of tasks and makes the CI/CD pipeline efficient,
 high in quality and reliable.

# Jenkins provides two types of pipeline
1) Scripted pipeline [it starts with node]
2) Declarative pipeline [it starts with pipeline]

# What is jenkins file
-> jenkins file is nothing but a simple text file which is used to write jenkins pipeline 
 and automates the continuous integration process


# Do you want to deploy your files into sonar-qube
-> First you have to create one ec2 instance with 4gb RAM t2.medium and sonar name
-> you need install java before you install sonarqube (you will above java steps to install java)
-> sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.2.46101.zip
-> sudo unzip sonarqube-8.9.2.46101.zip
-> sudo mv sonarqube-8.9.2.46101 /opt/
Note:- Sonar Qube server will not run with root user so that you have to create another user
-> sudo useradd sonar
-> sudo passwd sonar
-> sudo vim /etc/sudoers (or) sudo visudo
  sonar   ALL=(ALL)       ALL
-> cd /opt
-> sudo chown -R sonar:sonar sonarqube-8.9.2.46101
-> su sonar
-> cd /sonarqube-8.9.2.46101/bin/linux-x86-64            
-> sh sonar.sh start
-> cd /conf
-> vi sonar.properties (To see the sonarqube port number)
-> You have to some configuration to deploy the files into sonar-quebe
-> After Complete sonar-quebe install you will create token in sonar
-> later on you need to install sonarqube-scanner plugin in jenkins
-> you have to create credentials to sonaqube in jenkins
-> Go to manage jenkins and clic credentials and click Global credentials in system
-> Click secret text in Kind
-> Paste the sonar token in Secret and give ID Description name
-> After complete the give credentials
-> Go to manege jenkins and click system configure and go to Sonarqube installations
-> Give name like Sonar-Server-7.8 and give sonarqube URL and click sonar token in credentials
-> After the Sonarqube installations. Go to manages jenkins and click Global Tool Configuration
-> Give name like this Sonar-Scanner-4.7 and click version SonarQube Scanner 4.7.0.2747
-> Click save and apply
-> After complete the sonarqube configuration in jenkins
-> You will create one pipeline job
-> Click pipelinejob and paste below code in pipeline

You will install maven in jenkins instance
sudo yum update
sudo wget https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
sudo tar -xvf apache-maven-3.6.3-bin.tar.gz
sudo mv apache-maven-3.6.3 /opt/
cd /etc/profile.d/                                
ll                                                  
sudo vim maven.sh                                   
 	M2_HOME='/opt/apache-maven-3.6.3'            
	PATH="$M2_HOME/bin:$PATH"                    
	export PATH                                 
sh maven.sh                                          
cd ~
source /etc/profile
mvn --version 


pipeline{
    agent any
    environment {
        PATH = "$PATH:/opt/apache-maven-3.6.3/bin"
    }
    stages{
        stage('GetCode') {
            steps{
                git 'https://github.com/manoj7894/sonar.git'   # if you want to take data from partical branch use below command
            }                                                  # git  branch: 'main', url: 'https://github.com/manoj7894/sonar.git'
        }
        stage('Build') {
            steps{
                sh 'mvn clean package'
            }
        }
        stage('SonarQube analysis') {
            steps{
            withSonarQubeEnv('sonarqube-8.9.2') {         # Whichevr name you have given to sonar-qube in system configuration you will that name here 
                sh 'mvn sonar:sonar'
            }
                
            }
        }
        stage('Deploy to tomcat server') {
            steps{                                 
                deploy adapters: [tomcat9(credentialsId: '9a831b44-c240-4d99-be23-21564f3b0696', path: '', url: 'http://3.108.227.134:9090/')], contextPath: 'jobwar5o', war: '**/*.war'
            }
        }
    }
}


# How to get Email Notification in jenkins
-> First you have to install Email-extention plugin in jenkins
-> Go to manage jenkins and go to configure system and go to Extended Email Notification
To configure email in jenkins you will follow below youtube links
https://youtu.be/jIh66SjCUp4?si=ZfGQ_GwPjuBzAHeF
https://youtu.be/uMue7lNk3ew?si=nzaJE3635h5lfvMB

pipeline{
    agent any
    environment {
        PATH = "$PATH:/opt/apache-maven-3.6.3/bin"
    }
    stages{
        stage('GetCode') {
            steps{
                git 'https://github.com/manoj7894/sonar.git'   # if you want to take data from partical branch use below command
            }                                                  # git  branch: 'main', url: 'https://github.com/manoj7894/sonar.git'
        }
        stage('Build') {
            steps{
                sh 'mvn clean package'
            }
        }
        stage('SonarQube analysis') {
            steps{
            withSonarQubeEnv('sonarqube-8.9.2') {     # Whichevr name you have given to sonar-qube in system configuration you will that name here 
                sh 'mvn sonar:sonar'
            }
                
            }
        }
        stage('Deploy to tomcat server') {
            steps{                                 
                deploy adapters: [tomcat9(credentialsId: '9a831b44-c240-4d99-be23-21564f3b0696', path: '', url: 'http://3.108.227.134:9090/')], contextPath: 'jobwar5o', war: '**/*.war'
            }
        }
    }
    post {
            always{
                mail to: "varmapotthuri4@gmail.com",
                subject: "Test Email",
                body: "Test"
            }
        }
}

# Another way using pipeline syntax
post {
            always{
                mail bcc: '', body: '', cc: 'manojvarmapotthuri3003@gmail.com', from: '', replyTo: '', subject: 'jenkins file', to: 'varmapotthuri4@gmail.com'
            }
}



# How to deploy docker files into dockerhub using jenkins
-> You have to install docker in jenkins instance
-> Install docker
sudo yum update -y
sudo yum install docker -y
sudo service docker start
sudo chkconfig docker on
sudo usermod -aG docker $USER
docker --version
sudo service docker start
sudo service docker status
docker info
If it is not work once you will exit from instance and again you will login
-> After complete docker install you have install below plugins in jenkins
   Dcoker Pipeline and docker
-> After install docker plugin go to manage jenkins and clikc configuration tool and install docker [click install automatically in docker]
-> go to docker and click docker username [manoj3003] and go to account settings and click securiry and create the token
-> you have to create credentials to docker in jenkins
-> Go to manage jenkins and click credentials and click Global credentials in system
-> Select username and password and give docker username [manoj3003] and token password in jenkins credentials
-> Give ID name and description
-> After setup docker configuration in jenkins you will exexute the below script


-> You will write below code in Dockerfile in github
FROM nginx:latest
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


pipeline{
    agent any
    environment {
        PATH = "$PATH:/opt/apache-maven-3.6.3/bin"
        DOCKERHUB_CREDENTIALS=credentials('Docker_id')       # Give samename Whichever name you have given to ID in docker  credentials
    }
    stages{
        stage('GetCode') {
            steps{
                git 'https://github.com/manoj7894/sonar.git'   
            }                                                  
        }
        stage('Build') {
            steps{
                sh 'mvn clean package'
                sh 'docker build -t manoj3003/nginx_test11:latest .'
            }
        }
        stage('Login') {
            steps{
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('Push') {
            steps{
               sh 'docker push manoj3003/nginx_test11:latest'
          }
        }
        stage('Build Docker run') {
            steps{                                 
                sh 'docker run -d --name docker03 -p 8031:80 manoj3003/nginx_test11'
            }
        }
    }
}




# How to deploy terraform code by using jenkins
-> You have to install terraform using below steps in that jenkins instance
# How to install the terraform
sudo yum update -y
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
terraform --version

-> After complete the instalition you have to install terraform plugin in jenkins
-> Go to manage jenkins and go configure tools and Install terraform 
-> [give name and dont click automatic install and give terraform path using below command 
    which terraform   [if you not undrestand you will this youtube link https://youtu.be/jkR9S6sOR1I?si=dLJFLQE50WcDqend]  [/usr/bin]
-> you create one role with Ec2 along Administation full access policy and after create the policy you will attach that role to jenkins instance
-> After complete the terraform configuration in jenkins
-> You will create one job using below pipeline script

pipeline{
    agent any
    tools {
        terraform 'terraform-01'   # Give whichever name you have given when install terraform in jenkins
    }
    stages{
        stage('GetCode') {
            steps{
                git 'https://github.com/manoj7894/terraform.git'   
            }                                                  
        }
        stage('terraform init') {
            steps{
                sh 'terraform init'
            }
        }
        stage('terraform fmt') {
            steps{
                sh 'terraform fmt'
            }
        }
        stage('terraform validate') {
            steps{
                sh 'terraform validate'
            }
        }
        stage('terraform plan') {
            steps{
                sh 'terraform plan'
            }
        }
        stage('terraform apply') {
            steps{
                sh 'terraform apply -auto-approve'
            }
        }
    }
}



# If you want to use pipeline script from SCM  [SCM source cource management]
-> You have to mainatain your pipeline script in git hib as one file
-> When you execute pipeline script job and you will Pipeline Script SCM in Pipeline
-> Then It will appear to you git hub URL and script path
-> You will give github URL and you need keep whichever name you have given to pipeline script in github  
-> You will give same in script path


# If you want to connect one manchine to another machine by using SSH [To connect the default to default]
First you will create one file with pemfile name in your teaminal and paste the data in that file 
chmod 400 fielname
ssh -i "filename" ec2-user@172.31.1.150 --> give publicIp

-> To connect with user to user
create two users in both instances
To give all root permissions to both users by using sudo vim /etc/sudoers
To give passwd authontication yes by using sudo vi /etc/ssh/sshd_config

ssh-keygen
ssh-copy-id jenkins@localhost [key download in local host so that first you need to connect local host
ssh-copy-id username@privateIp
ssh 'jenkins@172.31.1.150'



# If you want to install multiple git hub data and checkout data
 You need to install the SCM mulitle plugin
 You will click in multi SCM in source code in free style
 ADD SCM, add git data add the git multiple gits
 if you want to go sub-derictory checkout click add behaviors





# Jenkins details
-> General
	1) project parametrized  --> To get build job from different branches
	2) Restrict where this porject can run
-> Source Code managenment
	1) Git
-> Build Triggers
	1) Build perdically [It will build the job whichever time you want]
	2) POLL SCM [It will build the job whenever developer change code in github]
	3) Build after other projects are build
-> Build Environment
	1) Delete workspace before build starts
-> Build
	1) Invoke top-level maven target
-> Post-buils Actions
	1) Deploy war/ear to a container
